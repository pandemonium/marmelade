(* Annoying that I need the pipe between pattern clauses.
   Also: parsing comments is broken.
   Also: parsing pattern matches with a single clause is broken. :)
*)

Window_Manager where
  make_window :: Rect -> Window

List ::= ∀a.
    Cons a (List a) | Nil
  where
    hd :: List a -> Option a = λπ.
      Cons x xs -> Some x
    | Nil       -> None


map :: ∀a b. (a -> b) -> List a -> List b = λf xs.
  let step = λxs x. Cons (f x) xs
  in fold_right Nil step xs

fold_right :: ∀b a. b -> (b -> a -> b) -> List a -> b = λacc f xs.
  deconstruct xs into
    Cons x xs -> f (fold_right acc f xs) x
  | Nil       -> acc

main = map id (Cons 1 (Cons 2 Nil))

id :: ∀a. a -> a = λx. x
(* hej *)
