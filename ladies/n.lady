List ::= ∀a. Cons a (List a) | Nil

main =
    map id (Cons 1 Nil)

id :: forall a. a -> a = λx. x
(* hej *)

map = λf xs.
  let step = λxs x. Cons (f x) xs
  in fold_right Nil step xs

fold_right = λacc f xs.
  deconstruct xs into
    Cons x xs -> f (fold_right acc f xs) x
  | Nil       -> acc
