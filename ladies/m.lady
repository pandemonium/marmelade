Perhaps ::= ∀a. This a | Nope

List ::= ∀a. Cons a (List a) | Nil

map = λf xs.
  let step = λxs x. Cons (f x) xs
  in fold_right Nil step xs

map2 = λf xs.
  deconstruct xs into
    Cons x xs -> Cons (f x) (map2 f xs)
  | Nil -> Cons "1" Nil

flip = λf p q. f q p

fold_left = λacc f xs.
  deconstruct xs into
    Cons x xs -> fold_left (f acc x) f xs
  | Nil       -> acc

fold_right = λacc f xs.
  deconstruct xs into
    Cons x xs -> f (fold_right acc f xs) x
  | Nil       -> acc

length = fold_left 0 λacc x. 1 + acc

output = λy. 1 + y

append = λxs. fold_right xs (flip Cons)

text = lambda x.
    let y = show x
    in y

xs = (Cons 1 (Cons 2 (Cons 3 (Cons 4 (Cons 5 Nil)))))
ys =
    deconstruct xs into
      Cons x xs -> xs
    | Nil       -> xs

id = lambda x. x

ss = (append (Cons 1 (Cons 2 (Cons 3 (Cons 4 (Cons 5 Nil))))) (Cons 1 (Cons 2 (Cons 3 (Cons 4 (Cons 5 Nil))))))

x =
    id (id deconstruct id (Cons (id 1) (id Nil)) into
      Cons x xs -> id xs
    | Nil -> id Nil)

main = map2 id (Cons 1 Nil)
