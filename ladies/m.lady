Perhaps ::= ∀a. This a | Nope

List ::= ∀a. Cons a (List a) | Nil

map = λf xs.
  let step = λxs x. Cons (f x) xs
  in fold_right Nil step xs

flip = λf p q. f q p

fold_left = λacc f xs.
  deconstruct xs into
    Cons x xs -> fold_left (f acc x) f xs
  | Nil       -> acc

fold_right = λacc f xs.
  deconstruct xs into
    Cons x xs -> f (fold_right acc f xs) x
  | Nil       -> acc

length = fold_left 0 λacc x. 1 + acc

output = λy. 1 + y

append = λxs. fold_right xs (flip Cons)

text = lambda x.
    let y = show x
    in y

main =
  let xs = Cons 1 (Cons 2 (Cons 3 (Cons 4 (Cons 5 Nil))))
  in map text (append xs xs)
